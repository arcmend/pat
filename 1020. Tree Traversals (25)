1020. Tree Traversals (25)
时间限制 
400 ms
内存限制 
65536 kB
代码长度限制 
16000 B
判题程序 
Standard 
作者 
CHEN, Yue
Suppose that all the keys in a binary tree are distinct positive integers. Given the postorder and inorder traversal sequences, you are supposed to output the level order traversal sequence of the corresponding binary tree.
Input Specification: 
Each input file contains one test case. For each case, the first line gives a positive integer N (<=30), the total number of nodes in the binary tree. The second line gives the postorder sequence and the third line gives the inorder sequence. All the numbers in a line are separated by a space.
Output Specification: 
For each test case, print in one line the level order traversal sequence of the corresponding binary tree. All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.
Sample Input:
7
2 3 1 5 7 6 4
1 2 3 4 5 6 7
Sample Output:
4 1 6 3 5 7 2
对于这一题用一个level结构来存储每层的节点，递归调用函数
use the struct of level to save node
#include<stdio.h>


int Postorder[30];
int Inorder[30];
struct level{
	int size;
	int num[30];
}L[30];
int Visited[30];
void calculate(int left,int right,int level,int left_range,int right_range);

int main()
{
	
	int level=0;
	int i,N;
	scanf("%d",&N);
	for(i=0;i<30;i++){
		L[i].size=0;
		//isited[i]=0;
	}
	for(i=0;i<N;i++)
		scanf("%d",&Postorder[i]);
	for(i=0;i<N;i++)
		scanf("%d",&Inorder[i]);
	calculate(0,N-1,level,0,N-1);
	printf("%d",L[0].num[0]);
	for(i=1;i<30;i++)
		if(L[i].size){
			int j;
			for(j=0;j<L[i].size;j++)
				printf(" %d",L[i].num[j]);
		}
		else
			break;	
	return 0;
}

void calculate(int left,int right,int level,int left_range,int right_range)
{
	if(left==right)
		L[level].num[L[level].size++]=Postorder[right];
	else if(left<right){
		L[level].num[L[level].size++]=Postorder[right];
		int i;
		for(i=0;i<=right_range-left_range;i++)
			if(Inorder[i+left_range]==Postorder[right])
				break;
		calculate(left,left+i-1,level+1,left_range,left_range+i-1);
		calculate(left+i,right-1,level+1,left_range+i+1,right_range);
	}
}
